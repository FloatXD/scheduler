// Code generated by MockGen. DO NOT EDIT.
// Source: smartctl.go

// Package healths is a generated GoMock package.
package healths

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDiskChecker is a mock of DiskChecker interface.
type MockDiskChecker struct {
	ctrl     *gomock.Controller
	recorder *MockDiskCheckerMockRecorder
}

// MockDiskCheckerMockRecorder is the mock recorder for MockDiskChecker.
type MockDiskCheckerMockRecorder struct {
	mock *MockDiskChecker
}

// NewMockDiskChecker creates a new mock instance.
func NewMockDiskChecker(ctrl *gomock.Controller) *MockDiskChecker {
	mock := &MockDiskChecker{ctrl: ctrl}
	mock.recorder = &MockDiskCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskChecker) EXPECT() *MockDiskCheckerMockRecorder {
	return m.recorder
}

// CheckHealthForLocalDisk mocks base method.
func (m *MockDiskChecker) CheckHealthForLocalDisk(device *DeviceInfo) (*DiskCheckResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealthForLocalDisk", device)
	ret0, _ := ret[0].(*DiskCheckResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHealthForLocalDisk indicates an expected call of CheckHealthForLocalDisk.
func (mr *MockDiskCheckerMockRecorder) CheckHealthForLocalDisk(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealthForLocalDisk", reflect.TypeOf((*MockDiskChecker)(nil).CheckHealthForLocalDisk), device)
}

// GetLocalDisksAll mocks base method.
func (m *MockDiskChecker) GetLocalDisksAll() ([]DeviceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalDisksAll")
	ret0, _ := ret[0].([]DeviceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalDisksAll indicates an expected call of GetLocalDisksAll.
func (mr *MockDiskCheckerMockRecorder) GetLocalDisksAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalDisksAll", reflect.TypeOf((*MockDiskChecker)(nil).GetLocalDisksAll))
}

// IsDiskHealthy mocks base method.
func (m *MockDiskChecker) IsDiskHealthy(devPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDiskHealthy", devPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDiskHealthy indicates an expected call of IsDiskHealthy.
func (mr *MockDiskCheckerMockRecorder) IsDiskHealthy(devPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDiskHealthy", reflect.TypeOf((*MockDiskChecker)(nil).IsDiskHealthy), devPath)
}
